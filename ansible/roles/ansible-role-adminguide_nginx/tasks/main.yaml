---
- name: Install nginx
  ansible.builtin.apt:
    update_cache: true
    name:
      - nginx
    state: present
  become: true

- name: "Create netbox service for http"
  netbox.netbox.netbox_service:
    netbox_url: "{{ netbox_url }}"
    netbox_token: "{{ netbox_token }}"
    data:
      virtual_machine: "{{ inventory_hostname }}"
      name: http
      port: 80
      protocol: TCP
    state: present
  delegate_to: localhost
  when: netbox_url and netbox_token

- name: "Create netbox service for https"
  netbox.netbox.netbox_service:
    netbox_url: "{{ netbox_url }}"
    netbox_token: "{{ netbox_token }}"
    data:
      virtual_machine: "{{ inventory_hostname }}"
      name: https
      port: 443
      protocol: TCP
    state: present
  delegate_to: localhost
  when: netbox_url and netbox_token

- name: "Adjust firewall rules for nginx"
  block:
    - name: "Iptables: Allow http and https"
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_ports: ["80", "443"]
        jump: ACCEPT
        ip_version: "{{ item }}"
      become: true
      with_items: [ipv4, ipv6]

    - name: "Iptables: Save current state in /etc/iptables/"
      community.general.iptables_state:
        ip_version: "ip{{ item }}"
        state: saved
        path: "/etc/iptables/rules.{{ item }}"
      become: true
      with_items:
        - [v4, v6]

- name: "Check if default vhost is enabled"
  ansible.builtin.stat:
    path: "/etc/nginx/sites-enabled/default"
  register: default_nginx_vhost

- name: "Disable default nginx vhost"
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  become: true
  when: default_nginx_vhost.stat.exists

- name: "Check if acme.sh is already installed"
  ansible.builtin.stat:
    path: "/root/.acme.sh"
  register: acmesh_installed
  become: true

- name: Install acme.sh
  ansible.builtin.include_tasks: acmesh_install.yaml
  when: not acmesh_installed.stat.exists

- name: "Handle vhost tasks"
  ansible.builtin.include_tasks: vhost.yaml
  with_dict: "{{ services | default({}) }}"
  when: "'value' in item and item.value.nginx_proxy is defined"
  vars:
    vhost: "{{ item.value }}"

- name: "Remove nginx_proxy from services"
  ansible.builtin.set_fact:
    services="{{new_services}}"
  vars:
    new_services: "{% set copy=services.copy() %}{% set removed=copy.pop('nginx_proxy') %}{{ copy }}"
